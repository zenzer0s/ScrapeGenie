name: Deploy to Google Cloud VM

on:
  push:
    branches:
      - main
     # - master

env:
  DOCKER_HUB_REPO: "${{ secrets.DOCKER_USERNAME }}/scrapegenie"
  VM_NAME: "${{ secrets.VM_NAME }}"
  VM_ZONE: "${{ secrets.VM_ZONE }}"
  SERVER_IP: "${{ secrets.SERVER_IP }}"
  DUCKDNS_DOMAIN: "scrapegenie.duckdns.org" 

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker Image
        run: |
          docker build -t ${{ env.DOCKER_HUB_REPO }}:latest .
          docker push ${{ env.DOCKER_HUB_REPO }}:latest

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Deploy to VM
        run: |
          gcloud compute ssh $VM_NAME --zone=$VM_ZONE --command '
            # Create directories and ensure proper permissions
            mkdir -p ~/app/logs ~/app/data ~/app/google_tokens
            chmod -R 755 ~/app/logs ~/app/data ~/app/google_tokens
            
            # Create .env file with Google OAuth settings
            echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" > ~/app/.env
            echo "USE_WEBHOOK=false" >> ~/app/.env
            echo "PUBLIC_URL=http://${{ env.DUCKDNS_DOMAIN }}:8080" >> ~/app/.env
            echo "BACKEND_URL=http://${{ env.DUCKDNS_DOMAIN }}:8080" >> ~/app/.env
            echo "PORT=8080" >> ~/app/.env
            echo "NODE_ENV=production" >> ~/app/.env
            echo "PYTHON_PATH=/usr/bin/python3" >> ~/app/.env
            echo "YT_DLP_PATH=/usr/local/bin/yt-dlp" >> ~/app/.env
            
            # Add Google OAuth credentials
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> ~/app/.env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> ~/app/.env
            echo "GOOGLE_REDIRECT_URI=http://${{ env.DUCKDNS_DOMAIN }}:8080/api/google/callback" >> ~/app/.env
            
            # Update DuckDNS (optional but recommended)
            if [ ! -z "${{ secrets.DUCKDNS_TOKEN }}" ]; then
              curl "https://www.duckdns.org/update?domains=${{ env.DUCKDNS_DOMAIN }}&token=${{ secrets.DUCKDNS_TOKEN }}"
            fi
            
            # Pull the latest Docker image
            sudo docker pull ${{ env.DOCKER_HUB_REPO }}:latest
            
            # Stop existing container if running
            sudo docker stop scrapegenie || true
            sudo docker rm scrapegenie || true
            
            # Start new container with Google tokens volume
            sudo docker run -d --name scrapegenie --restart unless-stopped \
              -p 8080:8080 \
              -v ~/app/logs:/app/logs \
              -v ~/app/data:/app/data \
              -v ~/app/google_tokens:/app/google/storage/tokens \
              --env-file ~/app/.env ${{ env.DOCKER_HUB_REPO }}:latest
            
            # Clean up unused Docker resources
            sudo docker system prune -f
          '

      - name: Verify Deployment
        run: |
          gcloud compute ssh $VM_NAME --zone=$VM_ZONE --command '
            echo "Container Status:"
            sudo docker ps | grep scrapegenie || echo "ScrapeGenie is not running!"
            echo "Container Logs:"
            sudo docker logs --tail 20 scrapegenie || echo "No logs available."
          '

      - name: Show Output
        run: |
          echo "âœ… Deployed to http://${{ env.DUCKDNS_DOMAIN }}:8080"
