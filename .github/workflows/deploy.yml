name: Build and Deploy to VM

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    
env:
  DOCKER_HUB_REPO: ${{ secrets.DOCKER_USERNAME }}/scrapegenie
  VM_NAME: ${{ secrets.VM_NAME }}
  VM_ZONE: ${{ secrets.VM_ZONE }}

jobs:
  build-test-deploy:
    name: Build, Test and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test || echo "No tests specified"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker Image
        run: |
          docker build -t ${{ env.DOCKER_HUB_REPO }}:${{ github.sha }} .
          docker tag ${{ env.DOCKER_HUB_REPO }}:${{ github.sha }} ${{ env.DOCKER_HUB_REPO }}:latest
          docker push ${{ env.DOCKER_HUB_REPO }}:${{ github.sha }}
          docker push ${{ env.DOCKER_HUB_REPO }}:latest

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Create SSH Keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/google_compute_engine
          chmod 600 ~/.ssh/google_compute_engine
          ssh-keygen -y -f ~/.ssh/google_compute_engine > ~/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine.pub

      - name: Deploy to VM
        run: |
          gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.VM_ZONE }} --command '
            sudo docker pull ${{ env.DOCKER_HUB_REPO }}:latest
            sudo docker rm -f scrapegenie || true
            echo "Creating .env file..."
            echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" > /home/zen/.env
            echo "USE_WEBHOOK=false" >> /home/zen/.env
            echo "PUBLIC_URL=${{ secrets.VM_PUBLIC_URL }}" >> /home/zen/.env
            echo "BACKEND_URL=${{ secrets.VM_PUBLIC_URL }}" >> /home/zen/.env
            echo "PORT=8080" >> /home/zen/.env
            echo "NODE_ENV=production" >> /home/zen/.env
            echo "PYTHON_PATH=/usr/bin/python3" >> /home/zen/.env
            sudo docker run -d --name scrapegenie --restart unless-stopped \
              -p 80:8080 \
              -v /home/zen/app/logs:/app/logs \
              -v /home/zen/app/data:/app/data \
              --env-file /home/zen/.env \
              ${{ env.DOCKER_HUB_REPO }}:latest
            sudo docker system prune -f
          '

      - name: Verify Deployment
        run: |
          gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.VM_ZONE }} --command '
            echo "Container Status:"
            sudo docker ps | grep scrapegenie || echo "ScrapeGenie is not running!"
            echo "Container Logs:"
            sudo docker logs --tail 20 scrapegenie || echo "No logs available."
          '

      - name: Configure Telegram Webhook
        run: |
          curl -F "url=https://${{ secrets.VM_PUBLIC_URL }}/webhook" \
            https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/setWebhook

      - name: Show Output
        run: echo "âœ… Deployed to https://${{ secrets.VM_PUBLIC_URL }}"