name: Deploy to Google Cloud VM

on:
  push:
    branches:
      - main
      - master

env:
  DOCKER_HUB_REPO: "${{ secrets.DOCKER_USERNAME }}/scrapegenie"
  VM_NAME: "${{ secrets.VM_NAME }}"
  VM_ZONE: "${{ secrets.VM_ZONE }}"
  SERVER_IP: "34.47.149.250"  # Your VM's IP address

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker Image
        run: |
          docker build -t ${{ env.DOCKER_HUB_REPO }}:latest .
          docker push ${{ env.DOCKER_HUB_REPO }}:latest

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Deploy to VM
        run: |
          gcloud compute ssh $VM_NAME --zone=$VM_ZONE --command "
            # Create temporary .env file
            cat > ~/temp_env << 'ENVFILE'
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            USE_WEBHOOK=false
            PUBLIC_URL=http://${{ env.SERVER_IP }}:8080
            BACKEND_URL=http://${{ env.SERVER_IP }}:8080
            PORT=8080
            NODE_ENV=production
            PYTHON_PATH=/usr/bin/python3
            ENVFILE
            
            # Create directories with sudo if needed
            sudo mkdir -p ~/app/logs
            sudo mkdir -p ~/app/data
            
            # Move the .env file with sudo
            sudo mv ~/temp_env ~/app/.env
            sudo chown \$(whoami):\$(whoami) ~/app/.env
            sudo chmod 600 ~/app/.env
            
            # Pull the latest Docker image
            sudo docker pull $DOCKER_HUB_REPO:latest
            
            # Stop existing container if running
            sudo docker rm -f scrapegenie || true
            
            # Start new container
            sudo docker run -d --name scrapegenie --restart unless-stopped \\
              -p 8080:8080 \\
              -v ~/app/logs:/app/logs \\
              -v ~/app/data:/app/data \\
              --env-file ~/app/.env \\
              $DOCKER_HUB_REPO:latest
            
            # Clean up unused Docker resources
            sudo docker system prune -f
          "

      - name: Verify Deployment
        run: |
          gcloud compute ssh $VM_NAME --zone=$VM_ZONE --command "
            echo \"Container Status:\"
            sudo docker ps | grep scrapegenie || echo \"ScrapeGenie is not running!\"
            echo \"Container Logs:\"
            sudo docker logs --tail 20 scrapegenie || echo \"No logs available.\"
          "

      - name: Show Output
        run: |
          echo "âœ… Deployed to http://${{ env.SERVER_IP }}:8080"
