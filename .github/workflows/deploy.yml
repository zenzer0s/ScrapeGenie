name: Build and Deploy to Cloud Run

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    # Manual trigger

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: asia-south1  # Changed to asia-south1 to match your region
  SERVICE: scrapegenie
  REGION: asia-south1

jobs:
  build-test-deploy:
    name: Build, Test and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test || echo "No tests specified"

      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      # Configure Docker to use gcloud as a credential helper
      - name: Auth Docker
        run: |
          gcloud auth configure-docker asia.gcr.io

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build -t asia.gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }} .

      # Push Docker image to Google Container Registry
      - name: Push Docker image
        run: |
          docker push asia.gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}

      # Deploy to Cloud Run
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: asia.gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}
          flags: |
            --concurrency=1
            --cpu=1
            --memory=1Gi
            --set-env-vars=NODE_ENV=production,USE_WEBHOOK=true
            --set-secrets=TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN_NAME }}:latest

      # Set PUBLIC_URL after deployment
      - name: Update environment with PUBLIC_URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE }} --region=${{ env.REGION }} --format='value(status.url)')
          gcloud run services update ${{ env.SERVICE }} \
            --region=${{ env.REGION }} \
            --set-env-vars=PUBLIC_URL=$SERVICE_URL

      # Output the deployed URL
      - name: Show Output
        run: echo "Deployed to ${{ steps.deploy.outputs.url }}"