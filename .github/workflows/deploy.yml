name: Build and Deploy to VM

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    # Manual trigger

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: asia-south1  # Region set to match deployment
  SERVICE: scrapegenie
  VM_NAME: ${{ secrets.VM_NAME }}
  VM_ZONE: ${{ secrets.VM_ZONE }}

jobs:
  build-test-deploy:
    name: Build, Test and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test || echo "No tests specified"

      # Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Configure Docker to use gcloud as a credential helper for Artifact Registry
      - name: Auth Docker
        run: gcloud auth configure-docker asia-south1-docker.pkg.dev

      # Build Docker image with Artifact Registry URL
      - name: Build Docker image
        run: |
          docker build -t asia-south1-docker.pkg.dev/${{ env.PROJECT_ID }}/scrapegenie/${{ env.SERVICE }}:${{ github.sha }} .
          docker tag asia-south1-docker.pkg.dev/${{ env.PROJECT_ID }}/scrapegenie/${{ env.SERVICE }}:${{ github.sha }} asia-south1-docker.pkg.dev/${{ env.PROJECT_ID }}/scrapegenie/${{ env.SERVICE }}:latest

      # Push Docker image to Google Artifact Registry
      - name: Push Docker image
        run: |
          docker push asia-south1-docker.pkg.dev/${{ env.PROJECT_ID }}/scrapegenie/${{ env.SERVICE }}:${{ github.sha }}
          docker push asia-south1-docker.pkg.dev/${{ env.PROJECT_ID }}/scrapegenie/${{ env.SERVICE }}:latest

      # Create SSH key for VM access
      - name: Create SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/google_compute_engine
          chmod 600 ~/.ssh/google_compute_engine
          echo "${{ secrets.VM_SSH_PUBLIC_KEY }}" > ~/.ssh/google_compute_engine.pub
          chmod 600 ~/.ssh/google_compute_engine.pub

      # Deploy to VM through SSH
      - name: Deploy to VM
        run: |
          gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.VM_ZONE }} --command '
            # Pull latest image
            sudo docker pull asia-south1-docker.pkg.dev/${{ env.PROJECT_ID }}/scrapegenie/${{ env.SERVICE }}:latest
            
            # Stop and remove existing container if exists
            sudo docker rm -f scrapegenie || true
            
            # Create .env file
            cat > /tmp/.env << EOF
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          USE_WEBHOOK=true
          PUBLIC_URL=${{ secrets.VM_PUBLIC_URL }}
          PORT=8080
          NODE_ENV=production
          EOF
            
            # Run new container
            sudo docker run -d \
              --name scrapegenie \
              --restart unless-stopped \
              -p 80:8080 \
              -v /home/${{ secrets.VM_USERNAME }}/app/logs:/app/logs \
              -v /home/${{ secrets.VM_USERNAME }}/app/data:/app/data \
              --env-file /tmp/.env \
              asia-south1-docker.pkg.dev/${{ env.PROJECT_ID }}/scrapegenie/${{ env.SERVICE }}:latest
            
            # Clean up
            rm /tmp/.env
            sudo docker system prune -f
          '

      # Verify deployment
      - name: Verify Deployment
        run: |
          gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.VM_ZONE }} --command '
            echo "Container Status:"
            sudo docker ps | grep scrapegenie
            
            echo "Container Logs:"
            sudo docker logs --tail 20 scrapegenie
          '

      # Output the deployed VM URL
      - name: Show Output
        run: echo "âœ… Deployed to ${{ secrets.VM_PUBLIC_URL }}"
